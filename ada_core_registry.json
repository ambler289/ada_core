{
  "modules": [
    {
      "module": "__init__",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\__init__.py",
      "functions": [],
      "tags": [
        "collect",
        "selection",
        "units",
        "views"
      ],
      "deps": [
        "ada_core"
      ]
    },
    {
      "module": "ada_ui_bootstrap",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\ada_ui_bootstrap.py",
      "functions": [
        {
          "name": "_candidate_paths",
          "public": false,
          "signature": "_candidate_paths(script_dir)",
          "summary": "Yield best-guess locations for ada_ui.",
          "safe": false,
          "args": [
            "script_dir"
          ]
        },
        {
          "name": "ensure_ada_ui_path",
          "public": true,
          "signature": "ensure_ada_ui_path(script_file)",
          "summary": "Ensure ada_ui directory is on sys.path. Returns the path used (or None).",
          "safe": false,
          "args": [
            "script_file"
          ]
        },
        {
          "name": "_try_import",
          "public": false,
          "signature": "_try_import(name)",
          "summary": "",
          "safe": false,
          "args": [
            "name"
          ]
        },
        {
          "name": "get_forms",
          "public": true,
          "signature": "get_forms(prefer)",
          "summary": "Import a 'forms' provider with sensible fallbacks.",
          "safe": false,
          "args": [
            "prefer"
          ]
        },
        {
          "name": "reload_ada_ui",
          "public": true,
          "signature": "reload_ada_ui(prefer)",
          "summary": "Hard-reload ada_ui + themed UI modules so changes are picked up without restarting Revit.",
          "safe": false,
          "args": [
            "prefer"
          ]
        }
      ],
      "tags": [
        "selection",
        "ui"
      ],
      "deps": [
        "revit_api",
        "pyrevit",
        "ada_bootstrap",
        "ada_brandforms_v6"
      ]
    },
    {
      "module": "collect",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\collect.py",
      "functions": [
        {
          "name": "_is_new_construction",
          "public": false,
          "signature": "_is_new_construction(elem)",
          "summary": "",
          "safe": false,
          "args": [
            "elem"
          ]
        },
        {
          "name": "windows_new_construction",
          "public": true,
          "signature": "windows_new_construction(doc, predicate)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "predicate"
          ]
        },
        {
          "name": "windows_in_view",
          "public": true,
          "signature": "windows_in_view(doc, view, predicate)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "view",
            "predicate"
          ]
        },
        {
          "name": "instances_of",
          "public": true,
          "signature": "instances_of(doc, bic)",
          "summary": "Generic instance collector by BuiltInCategory.",
          "safe": false,
          "args": [
            "doc",
            "bic"
          ]
        },
        {
          "name": "types_of",
          "public": true,
          "signature": "types_of(doc, bic)",
          "summary": "Generic type collector by BuiltInCategory.",
          "safe": false,
          "args": [
            "doc",
            "bic"
          ]
        },
        {
          "name": "collect_by_scope_safe",
          "public": true,
          "signature": "collect_by_scope_safe(doc, view, bic, scope_label, predicate)",
          "summary": "Return (elements, scope_str) filtered by category and optional predicate.",
          "safe": true,
          "args": [
            "doc",
            "view",
            "bic",
            "scope_label",
            "predicate"
          ]
        }
      ],
      "tags": [
        "collect",
        "params",
        "selection",
        "ui",
        "views"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "config",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\config.py",
      "functions": [
        {
          "name": "load_json",
          "public": true,
          "signature": "load_json(path, default)",
          "summary": "",
          "safe": false,
          "args": [
            "path",
            "default"
          ]
        },
        {
          "name": "save_json",
          "public": true,
          "signature": "save_json(path, data)",
          "summary": "",
          "safe": false,
          "args": [
            "path",
            "data"
          ]
        }
      ],
      "tags": [],
      "deps": [
        "ada_core"
      ]
    },
    {
      "module": "datums",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\datums.py",
      "functions": [
        {
          "name": "_scope_param",
          "public": false,
          "signature": "_scope_param(view)",
          "summary": "",
          "safe": false,
          "args": [
            "view"
          ]
        },
        {
          "name": "_curve_in_view",
          "public": false,
          "signature": "_curve_in_view(lvl, view)",
          "summary": "",
          "safe": false,
          "args": [
            "lvl",
            "view"
          ]
        },
        {
          "name": "force_hide_level_bubbles",
          "public": true,
          "signature": "force_hide_level_bubbles(doc, view, pad_ft)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "view",
            "pad_ft"
          ]
        }
      ],
      "tags": [
        "collect",
        "params",
        "views"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "deps",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\deps.py",
      "functions": [
        {
          "name": "ensure_paths",
          "public": true,
          "signature": "ensure_paths(paths)",
          "summary": "",
          "safe": false,
          "args": [
            "paths"
          ]
        },
        {
          "name": "optional_import",
          "public": true,
          "signature": "optional_import(name)",
          "summary": "",
          "safe": false,
          "args": [
            "name"
          ]
        },
        {
          "name": "has",
          "public": true,
          "signature": "has(name)",
          "summary": "",
          "safe": false,
          "args": [
            "name"
          ]
        }
      ],
      "tags": [],
      "deps": [
        "ada_core"
      ]
    },
    {
      "module": "doors",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\doors.py",
      "functions": [
        {
          "name": "get_panel_width_mm",
          "public": true,
          "signature": "get_panel_width_mm(door_type)",
          "summary": "",
          "safe": false,
          "args": [
            "door_type"
          ]
        },
        {
          "name": "set_panel_height_ft",
          "public": true,
          "signature": "set_panel_height_ft(door_type, height_ft)",
          "summary": "",
          "safe": false,
          "args": [
            "door_type",
            "height_ft"
          ]
        }
      ],
      "tags": [
        "params",
        "units"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "elements",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\elements.py",
      "functions": [
        {
          "name": "get_level_for_elem",
          "public": true,
          "signature": "get_level_for_elem(doc, elem)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "elem"
          ]
        },
        {
          "name": "is_existing_phase",
          "public": true,
          "signature": "is_existing_phase(elem)",
          "summary": "",
          "safe": false,
          "args": [
            "elem"
          ]
        },
        {
          "name": "prefix_mark_dx",
          "public": true,
          "signature": "prefix_mark_dx(elem)",
          "summary": "Prefix string param 'Mark' with Dx (preserving common prefixes).",
          "safe": false,
          "args": [
            "elem"
          ]
        }
      ],
      "tags": [
        "params",
        "units"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "errors",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\errors.py",
      "functions": [
        {
          "name": "swallow",
          "public": true,
          "signature": "swallow(fn, *a, **kw)",
          "summary": "",
          "safe": false,
          "args": [
            "fn"
          ]
        },
        {
          "name": "retry",
          "public": true,
          "signature": "retry(times, exceptions, fn, *a, **kw)",
          "summary": "",
          "safe": false,
          "args": [
            "times",
            "exceptions",
            "fn"
          ]
        }
      ],
      "tags": [],
      "deps": [
        "ada_core"
      ]
    },
    {
      "module": "geom",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\geom.py",
      "functions": [
        {
          "name": "bbox_from_elements",
          "public": true,
          "signature": "bbox_from_elements(elements, expand)",
          "summary": "",
          "safe": false,
          "args": [
            "elements",
            "expand"
          ]
        },
        {
          "name": "line_overlap_1d",
          "public": true,
          "signature": "line_overlap_1d(a0, a1, b0, b1, tol)",
          "summary": "",
          "safe": false,
          "args": [
            "a0",
            "a1",
            "b0",
            "b1",
            "tol"
          ]
        }
      ],
      "tags": [
        "selection"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "gp",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\gp.py",
      "functions": [
        {
          "name": "_has_spec_utils",
          "public": false,
          "signature": "_has_spec_utils()",
          "summary": "",
          "safe": false,
          "args": []
        },
        {
          "name": "_coerce_spec",
          "public": false,
          "signature": "_coerce_spec(ptype_or_spec)",
          "summary": "Accept either a ForgeTypeId (preferred) or a legacy ParameterType and",
          "safe": false,
          "args": [
            "ptype_or_spec"
          ]
        },
        {
          "name": "_mk_value_container",
          "public": false,
          "signature": "_mk_value_container(value, hint_spec)",
          "summary": "Return correct DB.*ParameterValue for a python value.",
          "safe": false,
          "args": [
            "value",
            "hint_spec"
          ]
        },
        {
          "name": "_find_gp_internal",
          "public": false,
          "signature": "_find_gp_internal(doc, name)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "find_gp",
          "public": true,
          "signature": "find_gp(doc, name)",
          "summary": "Public finder (safe).",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "ensure_gp",
          "public": true,
          "signature": "ensure_gp(doc, name, ptype, group)",
          "summary": "Find a Global Parameter by name or create it.",
          "safe": false,
          "args": [
            "doc",
            "name",
            "ptype",
            "group"
          ]
        },
        {
          "name": "ensure_gp_by_sample",
          "public": true,
          "signature": "ensure_gp_by_sample(doc, name, sample_param)",
          "summary": "Create a GP using the sample parameter's data type. Returns (gp, created_bool).",
          "safe": false,
          "args": [
            "doc",
            "name",
            "sample_param"
          ]
        },
        {
          "name": "set_gp_value",
          "public": true,
          "signature": "set_gp_value(doc, name, value, ptype, group)",
          "summary": "Ensure a GP then set its value. Returns the GP element. (Requires active Transaction).",
          "safe": false,
          "args": [
            "doc",
            "name",
            "value",
            "ptype",
            "group"
          ]
        },
        {
          "name": "set_gp_value_unit",
          "public": true,
          "signature": "set_gp_value_unit(doc, name, unit_tag, value)",
          "summary": "Convenience setter that handles simple unit tags:",
          "safe": false,
          "args": [
            "doc",
            "name",
            "unit_tag",
            "value"
          ]
        },
        {
          "name": "get_gp_value",
          "public": true,
          "signature": "get_gp_value(doc, name, default)",
          "summary": "Return the raw stored value (int/double/string/ElementId) or default if missing.",
          "safe": false,
          "args": [
            "doc",
            "name",
            "default"
          ]
        },
        {
          "name": "get_gp_value_typed",
          "public": true,
          "signature": "get_gp_value_typed(doc, name)",
          "summary": "Returns (unit_tag, value) with a light inference:",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "map_global_parameters_by_name",
          "public": true,
          "signature": "map_global_parameters_by_name(doc)",
          "summary": "Build a name \u2192 GlobalParameter map.",
          "safe": false,
          "args": [
            "doc"
          ]
        },
        {
          "name": "collect_gps_with_prefix",
          "public": true,
          "signature": "collect_gps_with_prefix(doc, prefix)",
          "summary": "Return all GPs whose names start with `prefix`.",
          "safe": false,
          "args": [
            "doc",
            "prefix"
          ]
        },
        {
          "name": "detect_global_parameter_associations",
          "public": true,
          "signature": "detect_global_parameter_associations(elements, doc)",
          "summary": "Detect GP associations for a list of elements.",
          "safe": false,
          "args": [
            "elements",
            "doc"
          ]
        },
        {
          "name": "dissociate_global_parameter_safely",
          "public": true,
          "signature": "dissociate_global_parameter_safely(entry, doc)",
          "summary": "Safely dissociate a GP from a parameter while preserving the current parameter value.",
          "safe": false,
          "args": [
            "entry",
            "doc"
          ]
        },
        {
          "name": "bulk_dissociate_global_parameters",
          "public": true,
          "signature": "bulk_dissociate_global_parameters(associations, doc)",
          "summary": "Bulk-dissociate GP associations; returns (removed, failed).",
          "safe": false,
          "args": [
            "associations",
            "doc"
          ]
        },
        {
          "name": "associate_params_safe",
          "public": true,
          "signature": "associate_params_safe(elements, inst_to_gp_map, gp_ids)",
          "summary": "Associate instance parameters to GPs by name.",
          "safe": true,
          "args": [
            "elements",
            "inst_to_gp_map",
            "gp_ids"
          ]
        }
      ],
      "tags": [
        "collect",
        "gp",
        "params",
        "selection",
        "units"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "graphics",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\graphics.py",
      "functions": [
        {
          "name": "get_line_pattern_id",
          "public": true,
          "signature": "get_line_pattern_id(doc, name)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "ensure_line_subcategory",
          "public": true,
          "signature": "ensure_line_subcategory(doc, parent_bic, subcat_name)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "parent_bic",
            "subcat_name"
          ]
        },
        {
          "name": "apply_line_style_override",
          "public": true,
          "signature": "apply_line_style_override(view, subcat, line_pattern_id, weight)",
          "summary": "",
          "safe": false,
          "args": [
            "view",
            "subcat",
            "line_pattern_id",
            "weight"
          ]
        },
        {
          "name": "delete_detail_curves_in_view",
          "public": true,
          "signature": "delete_detail_curves_in_view(view, style_name)",
          "summary": "",
          "safe": false,
          "args": [
            "view",
            "style_name"
          ]
        }
      ],
      "tags": [
        "collect",
        "views"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "ids",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\ids.py",
      "functions": [
        {
          "name": "eid_int",
          "public": true,
          "signature": "eid_int(eid)",
          "summary": "Robust ElementId \u2192 int.",
          "safe": false,
          "args": [
            "eid"
          ]
        },
        {
          "name": "eid_str",
          "public": true,
          "signature": "eid_str(eid)",
          "summary": "Human-readable ElementId string, safe for logs/UI.",
          "safe": false,
          "args": [
            "eid"
          ]
        }
      ],
      "tags": [
        "selection"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "layout",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\layout.py",
      "functions": [
        {
          "name": "_coerce_anchor",
          "public": false,
          "signature": "_coerce_anchor(val, enum_cls, default)",
          "summary": "",
          "safe": false,
          "args": [
            "val",
            "enum_cls",
            "default"
          ]
        },
        {
          "name": "_sorted_box",
          "public": false,
          "signature": "_sorted_box(p1, p2)",
          "summary": "Return (min_x, max_x, min_y, max_y) in sheet feet coords.",
          "safe": false,
          "args": [
            "p1",
            "p2"
          ]
        },
        {
          "name": "grid_positions_for_area",
          "public": true,
          "signature": "grid_positions_for_area(count, p1, p2, sizes_mm, gap_x_mm, gap_y_mm, max_rows, max_per_row, h_anchor, v_anchor, min_cell_w_mm, min_cell_h_mm)",
          "summary": "Compute grid positions (sheet coordinates) for placing 'count' view centers inside",
          "safe": false,
          "args": [
            "count",
            "p1",
            "p2",
            "sizes_mm",
            "gap_x_mm",
            "gap_y_mm",
            "max_rows",
            "max_per_row",
            "h_anchor",
            "v_anchor",
            "min_cell_w_mm",
            "min_cell_h_mm"
          ]
        }
      ],
      "tags": [
        "units",
        "views"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "levels",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\levels.py",
      "functions": [
        {
          "name": "is_ground_level",
          "public": true,
          "signature": "is_ground_level(level)",
          "summary": "Matches 'ground', 'level 0', 'l0', 'grade' or ~0 elevation.",
          "safe": false,
          "args": [
            "level"
          ]
        }
      ],
      "tags": [
        "params"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "log",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\log.py",
      "functions": [
        {
          "name": "log_info",
          "public": true,
          "signature": "log_info(*a)",
          "summary": "",
          "safe": false,
          "args": []
        },
        {
          "name": "log_warn",
          "public": true,
          "signature": "log_warn(*a)",
          "summary": "",
          "safe": false,
          "args": []
        },
        {
          "name": "log_err",
          "public": true,
          "signature": "log_err(*a)",
          "summary": "",
          "safe": false,
          "args": []
        }
      ],
      "tags": [],
      "deps": [
        "ada_core"
      ]
    },
    {
      "module": "naming",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\naming.py",
      "functions": [
        {
          "name": "slug",
          "public": true,
          "signature": "slug(text, repl)",
          "summary": "",
          "safe": false,
          "args": [
            "text",
            "repl"
          ]
        },
        {
          "name": "dedupe_name",
          "public": true,
          "signature": "dedupe_name(base, existing_names, sep, max_len)",
          "summary": "",
          "safe": false,
          "args": [
            "base",
            "existing_names",
            "sep",
            "max_len"
          ]
        },
        {
          "name": "sequence",
          "public": true,
          "signature": "sequence(prefix, start, width)",
          "summary": "",
          "safe": false,
          "args": [
            "prefix",
            "start",
            "width"
          ]
        }
      ],
      "tags": [],
      "deps": [
        "ada_core"
      ]
    },
    {
      "module": "params",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\params.py",
      "functions": [
        {
          "name": "specs_from_template",
          "public": true,
          "signature": "specs_from_template(template_data)",
          "summary": "",
          "safe": false,
          "args": [
            "template_data"
          ]
        },
        {
          "name": "get_element_id_value",
          "public": true,
          "signature": "get_element_id_value(element_id)",
          "summary": "",
          "safe": false,
          "args": [
            "element_id"
          ]
        },
        {
          "name": "read_parameter_typed",
          "public": true,
          "signature": "read_parameter_typed(param, DB)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "DB"
          ]
        },
        {
          "name": "write_parameter_typed",
          "public": true,
          "signature": "write_parameter_typed(param, value_info)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "value_info"
          ]
        },
        {
          "name": "get_parameter_element_id",
          "public": true,
          "signature": "get_parameter_element_id(param, DB)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "DB"
          ]
        },
        {
          "name": "get_parameter_by_name",
          "public": true,
          "signature": "get_parameter_by_name(element, param_name, DB)",
          "summary": "",
          "safe": false,
          "args": [
            "element",
            "param_name",
            "DB"
          ]
        },
        {
          "name": "has_parameter_value",
          "public": true,
          "signature": "has_parameter_value(param)",
          "summary": "",
          "safe": false,
          "args": [
            "param"
          ]
        },
        {
          "name": "resolve_param",
          "public": true,
          "signature": "resolve_param(element, candidates, DB)",
          "summary": "Try to resolve a parameter on element using a list of candidates.",
          "safe": false,
          "args": [
            "element",
            "candidates",
            "DB"
          ]
        },
        {
          "name": "resolve_any_param",
          "public": true,
          "signature": "resolve_any_param(elements, candidates, DB)",
          "summary": "Return the first (element,param) where the param resolves, else (None,None).",
          "safe": false,
          "args": [
            "elements",
            "candidates",
            "DB"
          ]
        },
        {
          "name": "try_param_str",
          "public": true,
          "signature": "try_param_str(param)",
          "summary": "",
          "safe": false,
          "args": [
            "param"
          ]
        },
        {
          "name": "try_param_int",
          "public": true,
          "signature": "try_param_int(param)",
          "summary": "",
          "safe": false,
          "args": [
            "param"
          ]
        },
        {
          "name": "try_param_double_internal",
          "public": true,
          "signature": "try_param_double_internal(param)",
          "summary": "",
          "safe": false,
          "args": [
            "param"
          ]
        },
        {
          "name": "try_param_length_mm",
          "public": true,
          "signature": "try_param_length_mm(param)",
          "summary": "Return parameter value in millimetres if this is a length-like parameter.",
          "safe": false,
          "args": [
            "param"
          ]
        },
        {
          "name": "set_param_string",
          "public": true,
          "signature": "set_param_string(param, text)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "text"
          ]
        },
        {
          "name": "set_param_yesno",
          "public": true,
          "signature": "set_param_yesno(param, value_bool)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "value_bool"
          ]
        },
        {
          "name": "set_param_int",
          "public": true,
          "signature": "set_param_int(param, value)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "value"
          ]
        },
        {
          "name": "set_param_double_internal",
          "public": true,
          "signature": "set_param_double_internal(param, value)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "value"
          ]
        },
        {
          "name": "set_param_length_mm",
          "public": true,
          "signature": "set_param_length_mm(param, value_mm)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "value_mm"
          ]
        },
        {
          "name": "set_yesno_by_names",
          "public": true,
          "signature": "set_yesno_by_names(elem, names, value_bool)",
          "summary": "Try a list of parameter names on an element/type; returns True if any were set.",
          "safe": false,
          "args": [
            "elem",
            "names",
            "value_bool"
          ]
        },
        {
          "name": "set_length_mm_by_names",
          "public": true,
          "signature": "set_length_mm_by_names(elem, names, value_mm)",
          "summary": "",
          "safe": false,
          "args": [
            "elem",
            "names",
            "value_mm"
          ]
        },
        {
          "name": "ensure_param_length_mm",
          "public": true,
          "signature": "ensure_param_length_mm(param, value_mm, tol_mm)",
          "summary": "Set length param only if different by > tol_mm.",
          "safe": false,
          "args": [
            "param",
            "value_mm",
            "tol_mm"
          ]
        },
        {
          "name": "ensure_param_int",
          "public": true,
          "signature": "ensure_param_int(param, value)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "value"
          ]
        },
        {
          "name": "ensure_param_yesno",
          "public": true,
          "signature": "ensure_param_yesno(param, value_bool)",
          "summary": "",
          "safe": false,
          "args": [
            "param",
            "value_bool"
          ]
        },
        {
          "name": "param_storage_name",
          "public": true,
          "signature": "param_storage_name(param)",
          "summary": "",
          "safe": false,
          "args": [
            "param"
          ]
        },
        {
          "name": "is_param_readonly",
          "public": true,
          "signature": "is_param_readonly(param)",
          "summary": "",
          "safe": false,
          "args": [
            "param"
          ]
        },
        {
          "name": "set_textnote_text_safe",
          "public": true,
          "signature": "set_textnote_text_safe(tn, text, DB)",
          "summary": "Set TextNote text via TEXT_TEXT; falls back to SetText if available. Returns bool.",
          "safe": true,
          "args": [
            "tn",
            "text",
            "DB"
          ]
        }
      ],
      "tags": [
        "collect",
        "params",
        "selection",
        "ui",
        "units"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "roofs",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\roofs.py",
      "functions": [
        {
          "name": "pick_roofs",
          "public": true,
          "signature": "pick_roofs(uidoc, prompt)",
          "summary": "",
          "safe": false,
          "args": [
            "uidoc",
            "prompt"
          ]
        },
        {
          "name": "roof_profile_curves",
          "public": true,
          "signature": "roof_profile_curves(roof)",
          "summary": "Try to pull explicit footprint profiles (fast path).",
          "safe": false,
          "args": [
            "roof"
          ]
        },
        {
          "name": "_slice_solid_edges_at_z",
          "public": false,
          "signature": "_slice_solid_edges_at_z(solid, z, tol)",
          "summary": "",
          "safe": false,
          "args": [
            "solid",
            "z",
            "tol"
          ]
        },
        {
          "name": "slice_roof_at_z",
          "public": true,
          "signature": "slice_roof_at_z(roof, z, tol)",
          "summary": "",
          "safe": false,
          "args": [
            "roof",
            "z",
            "tol"
          ]
        }
      ],
      "tags": [
        "selection"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "runtime",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\runtime.py",
      "functions": [
        {
          "name": "get_doc_uidoc",
          "public": true,
          "signature": "get_doc_uidoc()",
          "summary": "Return (uidoc, doc) from pyRevit runtime via __revit__ (unchanged).",
          "safe": false,
          "args": []
        },
        {
          "name": "get_uiapp_app",
          "public": true,
          "signature": "get_uiapp_app()",
          "summary": "Return (uiapp, app) using the same __revit__ handle.",
          "safe": false,
          "args": []
        },
        {
          "name": "safe_get_doc_uidoc",
          "public": true,
          "signature": "safe_get_doc_uidoc()",
          "summary": "Optional convenience: if __revit__ is missing for any reason,",
          "safe": false,
          "args": []
        }
      ],
      "tags": [],
      "deps": [
        "pyrevit",
        "ada_core"
      ]
    },
    {
      "module": "scope",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\scope.py",
      "functions": [
        {
          "name": "_big_buttons",
          "public": false,
          "signature": "_big_buttons(title, options, message)",
          "summary": "",
          "safe": false,
          "args": [
            "title",
            "options",
            "message"
          ]
        },
        {
          "name": "_select_many",
          "public": false,
          "signature": "_select_many(title, labels)",
          "summary": "",
          "safe": false,
          "args": [
            "title",
            "labels"
          ]
        },
        {
          "name": "dedupe",
          "public": true,
          "signature": "dedupe(elems, doc)",
          "summary": "",
          "safe": false,
          "args": [
            "elems",
            "doc"
          ]
        },
        {
          "name": "collect_in_project",
          "public": true,
          "signature": "collect_in_project(doc, bic_or_bics, where_element_is_not_type)",
          "summary": "Collect all elements for one or more BuiltInCategory values across the project.",
          "safe": false,
          "args": [
            "doc",
            "bic_or_bics",
            "where_element_is_not_type"
          ]
        },
        {
          "name": "collect_in_active_view",
          "public": true,
          "signature": "collect_in_active_view(doc, uidoc, bic_or_bics, where_element_is_not_type)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "uidoc",
            "bic_or_bics",
            "where_element_is_not_type"
          ]
        },
        {
          "name": "is_new_construction",
          "public": true,
          "signature": "is_new_construction(e)",
          "summary": "",
          "safe": false,
          "args": [
            "e"
          ]
        },
        {
          "name": "group_by_host_type",
          "public": true,
          "signature": "group_by_host_type(doc, elements)",
          "summary": "Group hostable elements (e.g., windows/doors) by their host's Type name.",
          "safe": false,
          "args": [
            "doc",
            "elements"
          ]
        },
        {
          "name": "group_by_param",
          "public": true,
          "signature": "group_by_param(elements, param_name)",
          "summary": "Group elements by an instance parameter's displayed string value.",
          "safe": false,
          "args": [
            "elements",
            "param_name"
          ]
        },
        {
          "name": "choose_scope",
          "public": true,
          "signature": "choose_scope(doc, uidoc, bic_or_bics, title=?, include_manual=?, include_current_selection=?, include_active_view=?, include_project=?, include_group_by_host_type=?, filter_new_construction_for_auto=?)",
          "summary": "Generic scope chooser. Returns (elements, scope_label, meta).",
          "safe": false,
          "args": [
            "doc",
            "uidoc",
            "bic_or_bics"
          ]
        }
      ],
      "tags": [
        "collect",
        "params",
        "selection",
        "ui",
        "units",
        "views"
      ],
      "deps": [
        "revit_api",
        "pyrevit",
        "ada_core"
      ]
    },
    {
      "module": "selection",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\selection.py",
      "functions": [
        {
          "name": "preselected_of_types",
          "public": true,
          "signature": "preselected_of_types(uidoc, doc, *allowed_types)",
          "summary": "Return preselected elements filtered by the given types. Accepts *types or a single sequence.",
          "safe": false,
          "args": [
            "uidoc",
            "doc"
          ]
        },
        {
          "name": "pick_until_esc",
          "public": true,
          "signature": "pick_until_esc(uidoc, doc, prompt, *allowed_types)",
          "summary": "Click elements of given types one-by-one until the user presses Esc. Returns list without duplicates.",
          "safe": false,
          "args": [
            "uidoc",
            "doc",
            "prompt"
          ]
        },
        {
          "name": "preselected_textnotes",
          "public": true,
          "signature": "preselected_textnotes(uidoc, doc)",
          "summary": "Return preselected TextNotes if any, else [].",
          "safe": false,
          "args": [
            "uidoc",
            "doc"
          ]
        },
        {
          "name": "pick_textnotes",
          "public": true,
          "signature": "pick_textnotes(uidoc, doc, prompt)",
          "summary": "Click TextNotes until Esc; filter on Python side to avoid ISelectionFilter quirks.",
          "safe": false,
          "args": [
            "uidoc",
            "doc",
            "prompt"
          ]
        },
        {
          "name": "safe_pick",
          "public": true,
          "signature": "safe_pick(uidoc, doc, prompt, allowed_types)",
          "summary": "Pick a single element; return None on Esc. Optionally restrict to types.",
          "safe": false,
          "args": [
            "uidoc",
            "doc",
            "prompt",
            "allowed_types"
          ]
        },
        {
          "name": "pick_elements_by_category",
          "public": true,
          "signature": "pick_elements_by_category(uidoc, doc, prompt, categories, unique_only)",
          "summary": "Pick-until-Esc for specific BuiltInCategories; returns elements (unique if unique_only).",
          "safe": false,
          "args": [
            "uidoc",
            "doc",
            "prompt",
            "categories",
            "unique_only"
          ]
        }
      ],
      "tags": [
        "selection"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "sheets",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\sheets.py",
      "functions": [
        {
          "name": "get_titleblock_instance",
          "public": true,
          "signature": "get_titleblock_instance(doc, sheet)",
          "summary": "Return the first titleblock instance placed on a sheet (if any).",
          "safe": false,
          "args": [
            "doc",
            "sheet"
          ]
        },
        {
          "name": "get_sheet_size_mm",
          "public": true,
          "signature": "get_sheet_size_mm(sheet)",
          "summary": "Sheet size (width_mm, height_mm) from sheet parameters.",
          "safe": false,
          "args": [
            "sheet"
          ]
        },
        {
          "name": "_tb_type_param_mm",
          "public": false,
          "signature": "_tb_type_param_mm(tb_type, name)",
          "summary": "",
          "safe": false,
          "args": [
            "tb_type",
            "name"
          ]
        },
        {
          "name": "_resolve_common_margins_mm",
          "public": false,
          "signature": "_resolve_common_margins_mm(tb_type)",
          "summary": "Probe common custom parameters on the titleblock TYPE to infer margins.",
          "safe": false,
          "args": [
            "tb_type"
          ]
        },
        {
          "name": "sheet_paper_and_margins_mm",
          "public": true,
          "signature": "sheet_paper_and_margins_mm(doc, sheet, overrides)",
          "summary": "Return a dictionary with paper size and margins (mm):",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "overrides"
          ]
        },
        {
          "name": "iso_class_from_mm",
          "public": true,
          "signature": "iso_class_from_mm(w_mm, h_mm, tol)",
          "summary": "Classify A-series size by dims (\u00b1tol mm). Returns 'A1'/'A2'/'A3'/'CUSTOM'.",
          "safe": false,
          "args": [
            "w_mm",
            "h_mm",
            "tol"
          ]
        },
        {
          "name": "sheet_capacity",
          "public": true,
          "signature": "sheet_capacity(doc, sheet, base_a3_cap, cap_limit)",
          "summary": "Heuristic capacity (how many similarly sized small viewports fit).",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "base_a3_cap",
            "cap_limit"
          ]
        },
        {
          "name": "_tb_bbox_on_sheet",
          "public": false,
          "signature": "_tb_bbox_on_sheet(doc, sheet)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "sheet"
          ]
        },
        {
          "name": "area_from_margins",
          "public": true,
          "signature": "area_from_margins(doc, sheet, margins_mm)",
          "summary": "Compute a placement rectangle (top-left XYZ, bottom-right XYZ) inside titleblock bbox,",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "margins_mm"
          ]
        },
        {
          "name": "clamp_area_to_margins",
          "public": true,
          "signature": "clamp_area_to_margins(doc, sheet, p1, p2, margins_mm)",
          "summary": "Clamp any picked rectangle to live within titleblock bbox minus margins.",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "p1",
            "p2",
            "margins_mm"
          ]
        },
        {
          "name": "find_sheets_by_title",
          "public": true,
          "signature": "find_sheets_by_title(doc, pattern, regex)",
          "summary": "Yield sheets whose Title matches pattern.",
          "safe": false,
          "args": [
            "doc",
            "pattern",
            "regex"
          ]
        },
        {
          "name": "list_sheet_viewport_viewids",
          "public": true,
          "signature": "list_sheet_viewport_viewids(doc, sheet)",
          "summary": "Return the ViewIds for all Viewports placed on a sheet.",
          "safe": false,
          "args": [
            "doc",
            "sheet"
          ]
        }
      ],
      "tags": [
        "collect",
        "params",
        "selection",
        "units",
        "views"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "tags",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\tags.py",
      "functions": [
        {
          "name": "tag_element",
          "public": true,
          "signature": "tag_element(doc, view, elem, symbol)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "view",
            "elem",
            "symbol"
          ]
        }
      ],
      "tags": [
        "selection",
        "views"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "templates",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\templates.py",
      "functions": [
        {
          "name": "resolve_roots",
          "public": true,
          "signature": "resolve_roots()",
          "summary": "Returns (templates_dir, projects_dir), considering env overrides.",
          "safe": false,
          "args": []
        },
        {
          "name": "legacy_timestamp",
          "public": true,
          "signature": "legacy_timestamp()",
          "summary": "MMDD_HHMM \u2014 matches your legacy unique suffix style.",
          "safe": false,
          "args": []
        },
        {
          "name": "build_prefix_from_template",
          "public": true,
          "signature": "build_prefix_from_template(tpl)",
          "summary": "Produce a short, unique prefix from template data:",
          "safe": false,
          "args": [
            "tpl"
          ]
        }
      ],
      "tags": [
        "selection",
        "ui"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "text",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\text.py",
      "functions": [
        {
          "name": "convert_case",
          "public": true,
          "signature": "convert_case(txt, mode)",
          "summary": "Convert text according to mode: 'lowercase', 'UPPERCASE', 'Title Case'.",
          "safe": false,
          "args": [
            "txt",
            "mode"
          ]
        }
      ],
      "tags": [],
      "deps": [
        "ada_core"
      ]
    },
    {
      "module": "transactions",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\transactions.py",
      "functions": [
        {
          "name": "batched",
          "public": true,
          "signature": "batched(doc, name, items, fn)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "name",
            "items",
            "fn"
          ]
        }
      ],
      "tags": [
        "units"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "tx",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\tx.py",
      "functions": [
        {
          "name": "_apply_silent_warnings",
          "public": false,
          "signature": "_apply_silent_warnings(t)",
          "summary": "Attach the SilentWarnings preprocessor to a Transaction.",
          "safe": false,
          "args": [
            "t"
          ]
        },
        {
          "name": "transact",
          "public": true,
          "signature": "transact(doc, name)",
          "summary": "Usage:",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "subtransact",
          "public": true,
          "signature": "subtransact(doc, name)",
          "summary": "Alias of transact; useful for semantic nesting.",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "run_in_tx",
          "public": true,
          "signature": "run_in_tx(doc, name, fn)",
          "summary": "Run a callable inside a transaction and return its result.",
          "safe": false,
          "args": [
            "doc",
            "name",
            "fn"
          ]
        },
        {
          "name": "group",
          "public": true,
          "signature": "group(doc, name)",
          "summary": "Usage:",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        }
      ],
      "tags": [
        "ui",
        "units"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "txn",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\txn.py",
      "functions": [
        {
          "name": "in_txn",
          "public": true,
          "signature": "in_txn(doc, name)",
          "summary": "Decorator: run function in a transaction.",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        }
      ],
      "tags": [
        "units"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "types",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\types.py",
      "functions": [
        {
          "name": "find_type_by_name_and_family",
          "public": true,
          "signature": "find_type_by_name_and_family(doc, type_name, family_name)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "type_name",
            "family_name"
          ]
        },
        {
          "name": "duplicate_type_with_name",
          "public": true,
          "signature": "duplicate_type_with_name(orig_type, new_name)",
          "summary": "",
          "safe": false,
          "args": [
            "orig_type",
            "new_name"
          ]
        }
      ],
      "tags": [
        "collect",
        "params"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "ui",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\ui.py",
      "functions": [
        {
          "name": "_ensure_ada_ui_path",
          "public": false,
          "signature": "_ensure_ada_ui_path()",
          "summary": "",
          "safe": false,
          "args": []
        },
        {
          "name": "_backend",
          "public": false,
          "signature": "_backend()",
          "summary": "Return a lightweight object with 'name' and a few callables:",
          "safe": false,
          "args": []
        },
        {
          "name": "_forms",
          "public": false,
          "signature": "_forms()",
          "summary": "Kept for compatibility with older imports that expected a forms-like object.",
          "safe": false,
          "args": []
        },
        {
          "name": "alert",
          "public": true,
          "signature": "alert(message, title)",
          "summary": "",
          "safe": false,
          "args": [
            "message",
            "title"
          ]
        },
        {
          "name": "confirm",
          "public": true,
          "signature": "confirm(message, title)",
          "summary": "Yes/No; returns bool.",
          "safe": false,
          "args": [
            "message",
            "title"
          ]
        },
        {
          "name": "choose_yes_no",
          "public": true,
          "signature": "choose_yes_no(message, title, yes, no)",
          "summary": "",
          "safe": false,
          "args": [
            "message",
            "title",
            "yes",
            "no"
          ]
        },
        {
          "name": "ask_string",
          "public": true,
          "signature": "ask_string(prompt, default, title)",
          "summary": "",
          "safe": false,
          "args": [
            "prompt",
            "default",
            "title"
          ]
        },
        {
          "name": "big_buttons",
          "public": true,
          "signature": "big_buttons(title, options, message, cancel)",
          "summary": "Return clicked label or None (ADa big-buttons; no search).",
          "safe": false,
          "args": [
            "title",
            "options",
            "message",
            "cancel"
          ]
        },
        {
          "name": "select_from_list",
          "public": true,
          "signature": "select_from_list(items, title, multiselect, name_attr)",
          "summary": "Return one item (or list of items if multiselect=True).",
          "safe": false,
          "args": [
            "items",
            "title",
            "multiselect",
            "name_attr"
          ]
        },
        {
          "name": "ask_int",
          "public": true,
          "signature": "ask_int(prompt, default, title)",
          "summary": "Numeric input helper that wraps ask_string.",
          "safe": false,
          "args": [
            "prompt",
            "default",
            "title"
          ]
        },
        {
          "name": "ask_float",
          "public": true,
          "signature": "ask_float(prompt, default, title)",
          "summary": "",
          "safe": false,
          "args": [
            "prompt",
            "default",
            "title"
          ]
        },
        {
          "name": "alert_v6",
          "public": true,
          "signature": "alert_v6(msg, title)",
          "summary": "Prefer v6 themed alert; gracefully falls back.",
          "safe": false,
          "args": [
            "msg",
            "title"
          ]
        },
        {
          "name": "confirm_v6",
          "public": true,
          "signature": "confirm_v6(msg, title)",
          "summary": "",
          "safe": false,
          "args": [
            "msg",
            "title"
          ]
        },
        {
          "name": "big_buttons_multi",
          "public": true,
          "signature": "big_buttons_multi(title, options, message, include_all)",
          "summary": "Return list of clicked labels. Uses ADa big-buttons multi-select with optional 'All'.",
          "safe": false,
          "args": [
            "title",
            "options",
            "message",
            "include_all"
          ]
        }
      ],
      "tags": [
        "ui",
        "units"
      ],
      "deps": [
        "revit_api",
        "pyrevit",
        "ada_bootstrap",
        "ada_brandforms_v6",
        "ada_core"
      ]
    },
    {
      "module": "ui_bulk",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\ui_bulk.py",
      "functions": [
        {
          "name": "_ada_safe_text",
          "public": false,
          "signature": "_ada_safe_text(val)",
          "summary": "",
          "safe": false,
          "args": [
            "val"
          ]
        },
        {
          "name": "_ada_style_button",
          "public": false,
          "signature": "_ada_style_button(btn, primary)",
          "summary": "",
          "safe": false,
          "args": [
            "btn",
            "primary"
          ]
        },
        {
          "name": "edit_parameters_bulk_winforms",
          "public": true,
          "signature": "edit_parameters_bulk_winforms(template_data, sample_window, title)",
          "summary": "",
          "safe": false,
          "args": [
            "self",
            "template_data",
            "sample_window",
            "title"
          ]
        }
      ],
      "tags": [
        "params",
        "ui",
        "units"
      ],
      "deps": [
        "revit_api"
      ]
    },
    {
      "module": "units",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\units.py",
      "functions": [
        {
          "name": "mm_to_ft",
          "public": true,
          "signature": "mm_to_ft(mm)",
          "summary": "Millimetres \u2192 internal feet.",
          "safe": false,
          "args": [
            "mm"
          ]
        },
        {
          "name": "ft_to_mm",
          "public": true,
          "signature": "ft_to_mm(ft)",
          "summary": "Internal feet \u2192 millimetres.",
          "safe": false,
          "args": [
            "ft"
          ]
        },
        {
          "name": "parse_float",
          "public": true,
          "signature": "parse_float(text, default)",
          "summary": "",
          "safe": false,
          "args": [
            "text",
            "default"
          ]
        },
        {
          "name": "is_zero_tol",
          "public": true,
          "signature": "is_zero_tol(a, b, tol)",
          "summary": "",
          "safe": false,
          "args": [
            "a",
            "b",
            "tol"
          ]
        },
        {
          "name": "to_internal_length",
          "public": true,
          "signature": "to_internal_length(value_mm)",
          "summary": "Alias for mm_to_ft (semantic clarity in call-sites).",
          "safe": false,
          "args": [
            "value_mm"
          ]
        },
        {
          "name": "to_display_mm",
          "public": true,
          "signature": "to_display_mm(value_ft)",
          "summary": "Alias for ft_to_mm (semantic clarity in call-sites).",
          "safe": false,
          "args": [
            "value_ft"
          ]
        },
        {
          "name": "clamp",
          "public": true,
          "signature": "clamp(x, lo, hi)",
          "summary": "",
          "safe": false,
          "args": [
            "x",
            "lo",
            "hi"
          ]
        },
        {
          "name": "safe_float",
          "public": true,
          "signature": "safe_float(x, default)",
          "summary": "",
          "safe": false,
          "args": [
            "x",
            "default"
          ]
        },
        {
          "name": "round_mm",
          "public": true,
          "signature": "round_mm(value_ft, step_mm)",
          "summary": "Round a length in feet to the nearest *step_mm* in mm, returning mm.",
          "safe": false,
          "args": [
            "value_ft",
            "step_mm"
          ]
        },
        {
          "name": "floor_mm",
          "public": true,
          "signature": "floor_mm(value_ft, step_mm)",
          "summary": "",
          "safe": false,
          "args": [
            "value_ft",
            "step_mm"
          ]
        },
        {
          "name": "ceil_mm",
          "public": true,
          "signature": "ceil_mm(value_ft, step_mm)",
          "summary": "",
          "safe": false,
          "args": [
            "value_ft",
            "step_mm"
          ]
        },
        {
          "name": "deg_to_rad",
          "public": true,
          "signature": "deg_to_rad(deg)",
          "summary": "",
          "safe": false,
          "args": [
            "deg"
          ]
        },
        {
          "name": "rad_to_deg",
          "public": true,
          "signature": "rad_to_deg(rad)",
          "summary": "",
          "safe": false,
          "args": [
            "rad"
          ]
        },
        {
          "name": "to_internal",
          "public": true,
          "signature": "to_internal(value, unit_tag)",
          "summary": "Convert a UI/display value into Revit internal storage:",
          "safe": false,
          "args": [
            "value",
            "unit_tag"
          ]
        },
        {
          "name": "to_display",
          "public": true,
          "signature": "to_display(value_internal, unit_tag)",
          "summary": "Convert Revit internal storage into a UI/display value.",
          "safe": false,
          "args": [
            "value_internal",
            "unit_tag"
          ]
        },
        {
          "name": "equal_mm",
          "public": true,
          "signature": "equal_mm(a_mm, b_mm, tol_mm)",
          "summary": "Tolerant compare in millimetres (default \u00b10.5 mm).",
          "safe": false,
          "args": [
            "a_mm",
            "b_mm",
            "tol_mm"
          ]
        },
        {
          "name": "equal_ft",
          "public": true,
          "signature": "equal_ft(a_ft, b_ft, tol_mm)",
          "summary": "Tolerant compare in internal feet (compare by \u00b1tol_mm).",
          "safe": false,
          "args": [
            "a_ft",
            "b_ft",
            "tol_mm"
          ]
        },
        {
          "name": "parse_length_mm",
          "public": true,
          "signature": "parse_length_mm(text, default_mm)",
          "summary": "Parse a user-entered length string into millimetres.",
          "safe": false,
          "args": [
            "text",
            "default_mm"
          ]
        },
        {
          "name": "format_mm",
          "public": true,
          "signature": "format_mm(value_ft, dp, thousands)",
          "summary": "Format internal feet as mm with dp decimals (default 0).",
          "safe": false,
          "args": [
            "value_ft",
            "dp",
            "thousands"
          ]
        },
        {
          "name": "format_length",
          "public": true,
          "signature": "format_length(value_ft, style, dp)",
          "summary": "Format length in different metric styles for UI, using internal feet as input.",
          "safe": false,
          "args": [
            "value_ft",
            "style",
            "dp"
          ]
        },
        {
          "name": "gp_spec_id_safe",
          "public": true,
          "signature": "gp_spec_id_safe(kind, DB)",
          "summary": "Resolve common spec kinds to ForgeTypeId across API variants.",
          "safe": true,
          "args": [
            "kind",
            "DB"
          ]
        },
        {
          "name": "create_or_find_gp_safe",
          "public": true,
          "signature": "create_or_find_gp_safe(doc, name, kind, default, group)",
          "summary": "Create or fetch a Global Parameter by name. Returns (ElementId, created_bool).",
          "safe": true,
          "args": [
            "doc",
            "name",
            "kind",
            "default",
            "group"
          ]
        },
        {
          "name": "create_legacy_gp_from_param_safe",
          "public": true,
          "signature": "create_legacy_gp_from_param_safe(doc, name, sample_param)",
          "summary": "Create a GP using data type from an existing parameter. Returns (ElementId, created_bool).",
          "safe": true,
          "args": [
            "doc",
            "name",
            "sample_param"
          ]
        },
        {
          "name": "associate_params_safe",
          "public": true,
          "signature": "associate_params_safe(elements, inst_to_gp_map, gp_ids)",
          "summary": "Associate instance parameters to GPs. Returns (count, logs).",
          "safe": true,
          "args": [
            "elements",
            "inst_to_gp_map",
            "gp_ids"
          ]
        }
      ],
      "tags": [
        "gp",
        "params",
        "selection",
        "ui",
        "units"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "viewports",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\viewports.py",
      "functions": [
        {
          "name": "get_viewports_on_sheet",
          "public": true,
          "signature": "get_viewports_on_sheet(doc, sheet)",
          "summary": "Return all Viewport instances placed on a given sheet.",
          "safe": false,
          "args": [
            "doc",
            "sheet"
          ]
        },
        {
          "name": "find_viewport_type_by_name",
          "public": true,
          "signature": "find_viewport_type_by_name(doc, name_exact)",
          "summary": "Resolve a viewport type by its Name. Common case is 'No Title'.",
          "safe": false,
          "args": [
            "doc",
            "name_exact"
          ]
        },
        {
          "name": "any_viewport_type",
          "public": true,
          "signature": "any_viewport_type(doc)",
          "summary": "Return some valid viewport type (first found), or None.",
          "safe": false,
          "args": [
            "doc"
          ]
        },
        {
          "name": "can_add_view",
          "public": true,
          "signature": "can_add_view(doc, sheet, view)",
          "summary": "Wrapper for Viewport.CanAddViewToSheet with guards.",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "view"
          ]
        },
        {
          "name": "add_views_at_positions",
          "public": true,
          "signature": "add_views_at_positions(doc, sheet, views, positions, vptype, post_create)",
          "summary": "Adds each view to the sheet at the matching position.",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "views",
            "positions",
            "vptype",
            "post_create"
          ]
        },
        {
          "name": "change_all_viewports_type_on_sheet",
          "public": true,
          "signature": "change_all_viewports_type_on_sheet(doc, sheet, vptype)",
          "summary": "Change the type of every viewport on a sheet; returns count changed.",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "vptype"
          ]
        },
        {
          "name": "set_all_viewports_no_title",
          "public": true,
          "signature": "set_all_viewports_no_title(doc, sheet, name_exact)",
          "summary": "Convenience: find type named 'No Title' (or provided string) and apply to all viewports.",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "name_exact"
          ]
        },
        {
          "name": "viewport_box_center",
          "public": true,
          "signature": "viewport_box_center(vp)",
          "summary": "Return the viewport box center if available (sheet coords).",
          "safe": false,
          "args": [
            "vp"
          ]
        },
        {
          "name": "align_rows_by_y",
          "public": true,
          "signature": "align_rows_by_y(sheet, tolerance_ft)",
          "summary": "Aligns viewports on a sheet into rows by snapping Y to row-average for clusters.",
          "safe": false,
          "args": [
            "sheet",
            "tolerance_ft"
          ]
        },
        {
          "name": "nudge_all_viewports",
          "public": true,
          "signature": "nudge_all_viewports(sheet, dx_ft, dy_ft)",
          "summary": "Move every viewport by the same delta in sheet coordinates.",
          "safe": false,
          "args": [
            "sheet",
            "dx_ft",
            "dy_ft"
          ]
        }
      ],
      "tags": [
        "collect",
        "params",
        "units",
        "views"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "views",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\views.py",
      "functions": [
        {
          "name": "section_type",
          "public": true,
          "signature": "section_type(doc, name)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "view_template_id",
          "public": true,
          "signature": "view_template_id(doc, name)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "name"
          ]
        },
        {
          "name": "tag_symbol",
          "public": true,
          "signature": "tag_symbol(doc, family_name)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "family_name"
          ]
        },
        {
          "name": "windows",
          "public": true,
          "signature": "windows(doc, only_new, exclude_skylights)",
          "summary": "Return window instances with optional filters.",
          "safe": false,
          "args": [
            "doc",
            "only_new",
            "exclude_skylights"
          ]
        },
        {
          "name": "taken_view_names",
          "public": true,
          "signature": "taken_view_names(doc)",
          "summary": "",
          "safe": false,
          "args": [
            "doc"
          ]
        },
        {
          "name": "unique_name",
          "public": true,
          "signature": "unique_name(base, taken)",
          "summary": "",
          "safe": false,
          "args": [
            "base",
            "taken"
          ]
        },
        {
          "name": "create_window_section",
          "public": true,
          "signature": "create_window_section(doc, window, vft, taken, offset_ft=?, interior_ft=?, exterior_margin_ft=?, base_offset_ft=?, extra_headroom_ft=?, head_ft=?)",
          "summary": "Create a section aligned to a window's facing orientation with a parametric crop box.",
          "safe": false,
          "args": [
            "doc",
            "window",
            "vft",
            "taken"
          ]
        },
        {
          "name": "ensure_section_type",
          "public": true,
          "signature": "ensure_section_type(doc, name, fallback_first)",
          "summary": "Return section ViewFamilyType by name, or first available if fallback_first=True.",
          "safe": false,
          "args": [
            "doc",
            "name",
            "fallback_first"
          ]
        },
        {
          "name": "collect_placed_view_ids",
          "public": true,
          "signature": "collect_placed_view_ids(doc)",
          "summary": "Return set of View.Id that are already placed on any sheet.",
          "safe": false,
          "args": [
            "doc"
          ]
        },
        {
          "name": "named_view_predicate",
          "public": true,
          "signature": "named_view_predicate(suffix_regex, allowed_types)",
          "summary": "Build a predicate: non-template, allowed type, name matches regex, not starting with 'WORK'.",
          "safe": false,
          "args": [
            "suffix_regex",
            "allowed_types"
          ]
        },
        {
          "name": "filter_unplaced_views",
          "public": true,
          "signature": "filter_unplaced_views(doc, view_predicate)",
          "summary": "Return sorted list of views passing predicate and not yet placed (numeric-aware sort).",
          "safe": false,
          "args": [
            "doc",
            "view_predicate"
          ]
        },
        {
          "name": "estimate_paper_size_mm",
          "public": true,
          "signature": "estimate_paper_size_mm(view, pad_mm, default_w_mm, default_h_mm)",
          "summary": "Estimate viewport paper size from crop box and view.Scale; returns (w_mm, h_mm).",
          "safe": false,
          "args": [
            "view",
            "pad_mm",
            "default_w_mm",
            "default_h_mm"
          ]
        },
        {
          "name": "hide_level_bubbles",
          "public": true,
          "signature": "hide_level_bubbles(view, doc)",
          "summary": "Best-effort hide level bubbles in a given view.",
          "safe": false,
          "args": [
            "view",
            "doc"
          ]
        }
      ],
      "tags": [
        "collect",
        "params",
        "selection",
        "ui",
        "units",
        "views"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    },
    {
      "module": "viewsheets",
      "path": "C:\\Users\\jon\\AppData\\Roaming\\pyRevit\\Extensions\\ADa-Manage.extension\\lib\\ada_core\\viewsheets.py",
      "functions": [
        {
          "name": "place_view_on_sheet",
          "public": true,
          "signature": "place_view_on_sheet(doc, sheet, view, pt)",
          "summary": "",
          "safe": false,
          "args": [
            "doc",
            "sheet",
            "view",
            "pt"
          ]
        },
        {
          "name": "grid_layout",
          "public": true,
          "signature": "grid_layout(count, cols, cell_w, cell_h, start, gutter_w, gutter_h)",
          "summary": "Return a list of XYZ positions for a grid with 'count' items.",
          "safe": false,
          "args": [
            "count",
            "cols",
            "cell_w",
            "cell_h",
            "start",
            "gutter_w",
            "gutter_h"
          ]
        }
      ],
      "tags": [
        "views"
      ],
      "deps": [
        "revit_api",
        "ada_core"
      ]
    }
  ]
}